Question

1 Compare kern/mpentry.S side by side with boot/boot.S. Bearing in mind that kern/mpentry.S is compiled and linked to run above KERNBASE just like everything else in the kernel, what is the purpose of macro MPBOOTPHYS? Why is it necessary in kern/mpentry.S but not in boot/boot.S? In other words, what could go wrong if it were omitted in kern/mpentry.S? 
Hint: recall the differences between the link address and the load address that we have discussed in Lab 1.

宏MPBOOTPHYS把MP_BOOT linear address转换成physical address.
Because in this AP core, it is run in real mode but after BSP enter kernel, so it need to use physical address.
But it is different to boot.S because in boot.S, before it enter kernel, it can use linear address as physical address directly, so needn't reduce KERNBASE.

2 It seems that using the big kernel lock guarantees that only one CPU can run the kernel code at a time. Why do we still need separate kernel stacks for each CPU? Describe a scenario in which using a shared kernel stack will go wrong, even with the protection of the big kernel lock.

在interrupt发生时，CPU在lock_kernel之前需要使用stack，这样就会在多核时导致race

3 In your implementation of env_run() you should have called lcr3(). Before and after the call to lcr3(), your code makes references (at least it should) to the variable e, the argument to env_run. Upon loading the %cr3 register, the addressing context used by the MMU is instantly changed. But a virtual address (namely e) has meaning relative to a given address context--the address context specifies the physical address to which the virtual address maps. Why can the pointer e be dereferenced both before and after the addressing switch?

在不同用户env里，他们唯一的区别就是他们的user space va，但是kernel address是相同的，所以当yield时，不需要该kernel virtual address pointer
